package example.T1.controllers;

import example.T1.model.Game;
import example.T1.model.User;
import example.T1.repositories.GameRepository;
import example.T1.services.GameService;
import example.T1.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;
import java.util.Optional;
/**
 * Class which map the paths for operation which are executed on game table
 */
@Component
@RequestMapping("/games")
public class GameController {

    /*@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GameRepository gameRepository;

    @GetMapping({"/allGames"})
    public ModelAndView getAllGames() {
        ModelAndView mav = new ModelAndView("index2");
        mav.addObject("game", gameRepository.findAll());
        return mav;
    }

    @GetMapping(path="/findGame/{id}")
    public @ResponseBody
    Optional<Game> getGame(@PathVariable(value = "id") Integer idGame) {
        // This returns a JSON or XML with the users
        return gameRepository.findById(idGame);
    }

    @RequestMapping(path="/deleteGame")
    public String deleteById(@RequestParam(value = "id") Integer idGame){
        try{
            gameRepository.deleteById(idGame);
            return "confirm";
        }catch (Exception e){
            e.printStackTrace();
            return "confirm";
        }
    }

    @RequestMapping(path="/addOneGame")
    public String saveGame(Game game){
        try{
            saveGameinDB(game);
        }catch (Exception e){
            e.printStackTrace();
            return "base2";
        }
        return "base2";
    }

    public void saveGameinDB(Game game){
        gameRepository.save(game);
    }

    @GetMapping(path="/updateGame")
    public ModelAndView updateGame(@RequestParam(value="id") Integer idGame){
        try{
            ModelAndView mav2=new ModelAndView("base2");
            Game game=gameRepository.findById(idGame).get();
            mav2.addObject("game", game);
            return mav2;
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }*/

    GameService gameService;

    /**
     *
     * @param gameService interface
     */
    public GameController(GameService gameService) {
        this.gameService = gameService;
    }

    /**
     * The function receives a GET request, processes it and gives back a list of Game as a response.
     * @return game
     */
    @GetMapping
    public ResponseEntity<List<Game>> getAllGames(){
        List<Game> games = gameService.getGames();
        return new ResponseEntity<>(games, HttpStatus.OK);
    }

    /**
     * The function receives a GET request, processes it, and gives back a list of Game as a response.
     * @param idGame integer
     * @return Game
     */
    @GetMapping({"/{idGame}"})
    public ResponseEntity<Game> getGameByID(@PathVariable Integer idGame){
        return new ResponseEntity<>(gameService.getGameByID(idGame), HttpStatus.OK);
    }

    /**
     * The function receives a POST request, processes it, creates a new Game and saves it to the database, and returns a resource link to the created game.
     * @param game object
     * @return Game
     */
    @PostMapping
    public ResponseEntity<Game> createGame(@RequestBody Game game){
        Game game1 = gameService.createGame(game);
        HttpHeaders httpHeaders=new HttpHeaders();
        httpHeaders.add("game", "games"+game1.getIdGame().toString());
        return new ResponseEntity<>(game1, httpHeaders, HttpStatus.CREATED);
    }

    /**
     * The function receives a PUT request, updates the User with the specified Id and returns the updated Game
     * @param idGame integer
     * @param game object
     * @return Game
     */
    @PutMapping({"/{idGame}"})
    public ResponseEntity<Game> updateGame(@PathVariable("idGame") Integer idGame, @RequestBody Game game){
        gameService.updateGame(idGame, game);
        return new ResponseEntity<>(gameService.getGameByID(idGame), HttpStatus.OK);
    }

    /**
     * The function receives a DELETE request, deletes the game with the specified Id.
     * @param idGame integer
     * @return Game
     */
    @DeleteMapping({"/{idGame}"})
    public ResponseEntity<Game> deleteGameByID(@PathVariable("idGame") Integer idGame){
        gameService.deleteGameByID(idGame);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
